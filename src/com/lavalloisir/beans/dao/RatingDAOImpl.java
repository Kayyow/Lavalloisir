package com.lavalloisir.beans.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.Statement;
import java.util.ArrayList;

import com.lavalloisir.beans.business.Category;
import com.lavalloisir.beans.business.Leisure;
import com.lavalloisir.beans.business.Rating;
import com.lavalloisir.beans.business.User;


public class RatingDAOImpl implements RatingDAO{

	private DAOFactory daoFactory;
	
	RatingDAOImpl (DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
    private static final String SQL_INSERT = "INSERT INTO evaluation "
    		+ "(Note, Option_Courte, Commentaire, Date, Id_Utilisateur, Id_Loisir) "
    		+ "VALUES (?, ?, ?, ?, ?, ?, NOW())";
    
    
    @Override
    public void create (Rating rating) throws IllegalArgumentException, DAOException {
    	Connection cnct = null;
    	PreparedStatement preparedStmt = null;
    	ResultSet autoGeneratedValues = null;
    	
    	try {
    		// Récupération d'une connexion depuis la Factory
    		cnct = daoFactory.getConnection();
    		preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_INSERT, true,
    		rating.getRating(), rating.getSummaryComment(), rating.getComment(),
    		rating.getDateRating(), rating.getUser().getId(), rating.getLeisure().getId());
    		
    		int status = preparedStmt.executeUpdate();
    		
    		// Analyse du statut retourné par la requête d'insertion
    		if (status == 0) {
    			throw new DAOException("Echec de la création de l'évaluation, aucune ligne ajoutée à la table.");
    		}
    		
    		autoGeneratedValues = preparedStmt.getGeneratedKeys();
    		if (autoGeneratedValues.next()) {

    			rating.setId(autoGeneratedValues.getInt(1));
    		} else {
    			throw new DAOException("Echec de la création de l'évaluation en base, aucun ID auto-généré retourné.");
    		}
    	} catch (SQLException e) {
    		throw new DAOException(e);
    	} finally {
    		DAOUtil.silentsClosing(autoGeneratedValues, preparedStmt, cnct);
    	}
    }
    
	private static final String SQL_SELECT = "SELECT "
			+ "Id, Note, Option_Courte, Commentaire, Date, Id_Utilisateur, Id_Loisir, "
			+ "FROM evaluation";
	
    
 // Implémentation de la méthode Lister() définie dans l'interface RatingDao
    @Override
    public ArrayList<Rating> list () throws DAOException {
        Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        Rating rating = null;
        ArrayList<Rating> list = new ArrayList();
        
        try {
        	// Récupération d'une connexion depuis la Factory
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT, false);
        	rs = preparedStmt.executeQuery();
        	
        	// Parcours de la ligne de donnée de l'éventuel ResultSet retourné
        	while (rs.next()) {
        		rating = map(rs);
        		list.add(rating);
        	}
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
        
        return list;
    }
    
    
	private static Rating map (ResultSet rs) throws SQLException {
		Rating rating = new Rating();
		rating.setId(rs.getInt("Id"));
		rating.setRating(rs.getInt("Note"));
		rating.setSummaryComment(rs.getString("Option_Courte"));
		rating.setComment(rs.getString("Commentaire"));
		rating.setDateRating(rs.getTimestamp("Date"));
		
		long idLeisure = rs.getLong("Id_Loisir");
		LeisureDAOImpl leisureDAO = new LeisureDAOImpl();
		Leisure leisure = leisureDAO.findById(idLeisure);
		rating.setLeisure(leisure);
		
		long idUser = rs.getLong("Id_Utilisateur");
		UserDAOImpl userDAO = new UserDAOImpl();
		User user = userDAO.findById(idUser);
		rating.setUser(user);

		return rating;
	}
    
	
	
	////////////////////////////////////////////////////////////
	////////// A MODIFIER/ADAPTER. (Fait par Julien) ///////////
	////////////////////////////////////////////////////////////
	public static void create(Connection cnx, Rating rating){
		
		Statement stmt = null;
		
		
		try {
			stmt = (Statement)cnx.createStatement();
		
			stmt.executeUpdate("INSERT INTO evaluation (Note, Option_Courte, Commentaire, Date, Id_Utilisateur, Id_Loisir)"
					+"VALUES('" + rating.getRating() + "',"
					+ "'" + rating.getSummaryComment() +"',"
					+"'" + rating.getComment() + "',"
					+"'" + rating.getDateRating() + "',"
					+ "'" + rating.getUser().getId() + "',"
					+ "'" + rating.getLeisure().getId() +"')");

		}catch(Exception ex){
			
		}finally {
			if(stmt != null){
				try{
					stmt.close();
				} catch (Exception Ex){
				}
			}
		}
	}

}
