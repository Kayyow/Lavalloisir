package com.lavalloisir.beans.dao;

import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;

import com.lavalloisir.beans.business.User;
import com.lavalloisir.beans.dao.UserDAO;
import com.lavalloisir.beans.dao.DAOUtil;

public class UserDAOImpl implements UserDAO {
	private DAOFactory daoFactory;
	
	UserDAOImpl (DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	public UserDAOImpl() {
	}

	private static final String SQL_SELECT_BY_LOGIN_PASSWD = "SELECT "
			+ "id, nom, prenom, email, login, motDePasse, photoProfil, dateInscription "
			+ "FROM utilisateur WHERE login = ? AND motDePasse = ?";
	
	// Implémentation de la méthode trouver() définie dans l'interface UtilisateurDao
    @Override
    public User find (String login, String password) throws DAOException {
        Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        User user = null;
        
        try {
        	// Récupération d'une connexion depuis la Factory
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_BY_LOGIN_PASSWD, false, login, password);
        	rs = preparedStmt.executeQuery();
        	
        	// Parcours de la ligne de donnée de l'éventuel ResultSet retourné
        	if (rs.next()) {
        		user = map(rs);
        	}
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
        
        return user;
    }
	
    private static final String SQL_SELECT_BY_ID = "SELECT "
			+ "id, nom, prenom, email, login, motDePasse, photoProfil, dateInscription "
			+ "FROM utilisateur WHERE login = ? AND motDePasse = ?";
	
	// Implémentation de la méthode trouver() définie dans l'interface UtilisateurDao
    @Override
    public User findById ( long id) throws DAOException {
        Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        User user = null;
        
        try {
        	// Récupération d'une connexion depuis la Factory
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_BY_ID, false, id);
        	rs = preparedStmt.executeQuery();
        	
        	// Parcours de la ligne de donnée de l'éventuel ResultSet retourné
        	if (rs.next()) {
        		user = map(rs);
        	}
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
        
        return user;
    }
    
    private static final String SQL_SELECT_BY_EMAIL = "SELECT "
			+ "id, nom, prenom, email, login, motDePasse, photoProfil, dateInscription "
			+ "FROM utilisateur WHERE email = ? ";
	
	// Implémentation de la méthode trouver() définie dans l'interface UtilisateurDao
    @Override
    public User findByEmail ( String email) throws DAOException {
        Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        User user = null;
        
        try {
        	// Récupération d'une connexion depuis la Factory
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_BY_EMAIL, false, email);
        	rs = preparedStmt.executeQuery();
        	
        	// Parcours de la ligne de donnée de l'éventuel ResultSet retourné
        	if (rs.next()) {
        		user = map(rs);
        	}
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
        
        return user;
    }
    
    private static final String SQL_INSERT = "INSERT INTO utilisateur "
    		+ "(nom, prenom, email, login, motDePasse, photoProfil, dateInscription) "
    		+ "VALUES (?, ?, ?, ?, ?, ?, NOW())";
    
	// Implémentation de la méthode creer() définie dans l'interface UtilisateurDao
    @Override
    public void create (User user) throws IllegalArgumentException, DAOException {
    	Connection cnct = null;
    	PreparedStatement preparedStmt = null;
    	ResultSet autoGeneratedValues = null;
    	
    	try {
    		// Récupération d'une connexion depuis la Factory
    		cnct = daoFactory.getConnection();
    		preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_INSERT, true,
    				user.getName(), user.getFirstName(), user.getEmail(), user.getLogin(),
    				user.getPassword(), user.getProfilPicture());
    		int status = preparedStmt.executeUpdate();
    		
    		// Analyse du statut retourné par la requête d'insertion
    		if (status == 0) {
    			throw new DAOException("Echec de la création de l'utilisateur, aucune ligne ajoutée à la table.");
    		}
    		
    		// Récupération de l'id auto-généré par la requête d'insertion
    		autoGeneratedValues = preparedStmt.getGeneratedKeys();
    		if (autoGeneratedValues.next()) {
    			// Puis initialisation de la propriété id du bean Utilisateur avec sa valeur
    			user.setId(autoGeneratedValues.getLong(1));
    		} else {
    			throw new DAOException("Echec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
    		}
    	} catch (SQLException e) {
    		throw new DAOException(e);
    	} finally {
    		DAOUtil.silentsClosing(autoGeneratedValues, preparedStmt, cnct);
    	}
    }
    
    /**
	 * Simple méthode utilitaire permettant de faire la correspondance (le mapping)
	 * entre une ligne issue de la table utilisateur (un ResultSet) et un bean User
	 * @param rs
	 * @return
	 * @throws SQLException
	 */
	private static User map (ResultSet rs) throws SQLException {
		User user = new User();
		user.setId(rs.getLong("id"));
		user.setName(rs.getString("nom"));
		user.setFirstName(rs.getString("prenom"));
		user.setEmail(rs.getString("email"));
		user.setLogin(rs.getString("login"));
		user.setPassword(rs.getString("motDePasse"));
		user.setProfilPicture(rs.getString("imageProfil"));
		user.setRegisterDate(rs.getTimestamp("dateInscription"));
		return user;
	}
	
	
	
	
	
	
	////////////////////////////////////////////////////////////
	////////// A MODIFIER/ADAPTER. (Fait par Julien) ///////////
	////////////////////////////////////////////////////////////
	public static User find(Connection cnx, String login){
		
		Statement stmt = null;
		User user = null;
		
		try {
			stmt = (Statement)cnx.createStatement();
			
			ResultSet result = stmt.executeQuery("SELECT Nom, Prenom, Email, Login, DateInscription FROM utilisateur"
					+ "WHERE Logn ='" + login + "'");
			
			if(result.next()){
				user = new User();
				
				user.setName(result.getString("Nom"));
				user.setFirstName(result.getString("Prenom"));
				user.setEmail(result.getString("Email"));
				user.setLogin(result.getString("Login"));
				user.setRegisterDate(result.getTimestamp("DateInscription"));
			}
			
			
		}catch(Exception ex){
			
		}finally {
			if(stmt != null){
                try{
                    stmt.close();
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            }
		}

		return user;
	}
	
	public static void create(Connection cnx, User user){
		
		User u = find(cnx, user.getLogin());
		Statement stmt = null;
		
		if( u == null){
			
			try {
				stmt = (Statement)cnx.createStatement();
			
				stmt.executeUpdate("INSERT INTO utilisateur (Nom, Prenom, Email, Login, MotDePasse, DateInscription)"
						+"VALUES('" + user.getName() + "',"
						+ "'" + user.getFirstName() +"',"
						+"'" + user.getEmail() + "',"
						+"'" + user.getLogin() + "',"
						+ "'" + user.getPassword() + "',"
						+ "'" + user.getRegisterDate() +"')");

			}catch(Exception ex){
				
			}finally {
				if(stmt != null){
					try{
						stmt.close();
					} catch (Exception Ex){
					}
				}
			}
		}
	}
}
