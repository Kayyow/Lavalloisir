package com.lavalloisir.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.lavalloisir.beans.Address;

public class AddressDAOImpl implements AddressDAO {
	
	private DAOFactory daoFactory;
	
	AddressDAOImpl (DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	public AddressDAOImpl() {
	}
	
	@Override
	public void create (Address address) throws DAOException {
		Connection cnct = null;
		PreparedStatement preparedStmt = null;
		ResultSet autoGeneratedValues = null;
		
		try {
			cnct = daoFactory.getConnection();
			String query = SQLFactory.insertInto("address", "number, street, zip_code, city",
					"?, ?, ?, ?");
			preparedStmt = DAOUtil.initPreparedStatement(cnct, query, true, address.getNumber(),
					address.getStreet(), address.getZipCode(), address.getCity());
			
			if (preparedStmt.executeUpdate() == 0) {
				throw new DAOException("Echec de la création de l'adresse, aucune ligne ajoutée à la table.");
			}
			
			autoGeneratedValues = preparedStmt.getGeneratedKeys();
			if (autoGeneratedValues.next()) {
				address.setId(autoGeneratedValues.getLong(1));
			} else {
				throw new DAOException("Echec de la création de l'adresse en base, aucun ID auto-généré retourné.");
			}			
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtil.silentsClosing(autoGeneratedValues, preparedStmt, cnct);
		}
	}
	
	@Override
	public Address read (long id) throws DAOException {
		Connection cnct = null;
		PreparedStatement preparedStmt = null;
		ResultSet rs = null;
		Address address = null;
		
		try {
			cnct = daoFactory.getConnection();
			String query = SQLFactory.selectWhere("address", "id = ?");
			preparedStmt = DAOUtil.initPreparedStatement(cnct, query, false, id);
			rs = preparedStmt.executeQuery();
			
			if (rs.next()) {
				address = map(rs);
			}
			
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtil.silentsClosing(rs, preparedStmt, cnct);
		}
		
		return address;
	}
	
	/**
	 * 
	 * @param rs
	 * @return
	 * @throws SQLException
	 */
	private static Address map (ResultSet rs) throws SQLException {
		Address address = new Address();
		
		address.setId(rs.getLong("id"));
		address.setNumber(rs.getInt("number"));
		address.setStreet(rs.getString("street"));
		address.setZipCode(rs.getString("zip_code"));
		address.setCity(rs.getString("city"));
		
		return address;
	}
}
