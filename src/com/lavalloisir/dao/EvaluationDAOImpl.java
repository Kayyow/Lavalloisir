package com.lavalloisir.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import com.lavalloisir.beans.Leisure;
import com.lavalloisir.beans.Evaluation;
import com.lavalloisir.beans.User;


public class EvaluationDAOImpl implements EvaluationDAO{

	private DAOFactory daoFactory;
	
	EvaluationDAOImpl (DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
    private static final String SQL_INSERT = "INSERT INTO evaluation "
    		+ "(Note, Id_Utilisateur, Id_Loisir) "
    		+ "VALUES (?, ?, ?)";
    @Override
    public void create (Rating rating) throws IllegalArgumentException, DAOException {
    	Connection cnct = null;
    	PreparedStatement preparedStmt = null;
    	ResultSet autoGeneratedValues = null;
    	
    	try {
    		// Récupération d'une connexion depuis la Factory
    		cnct = daoFactory.getConnection();
    		preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_INSERT, true,
    		rating.getScore(), rating.getUser().getId(), rating.getLeisure().getId());
    		
    		int status = preparedStmt.executeUpdate();
    		
    		// Analyse du statut retourné par la requête d'insertion
    		if (status == 0) {
    			throw new DAOException("Echec de la création de l'évaluation, aucune ligne ajoutée à la table.");
    		}
    	} catch (SQLException e) {
    		throw new DAOException(e);
    	} finally {
    		DAOUtil.silentsClosing(autoGeneratedValues, preparedStmt, cnct);
    	}
    }
    
    private static final String SQL_SELECT_ALL = "SELECT "
			+ "Id_Utilisateur, Id_Loisir, Note "
			+ "FROM evaluation";
	@Override
	public List<Rating> selectAll() throws DAOException {
		Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        Rating rating = null;
        List<Rating> ratings = new ArrayList<Rating>();
                
        try {
        	// Récupération d'une connexion depuis la Factory
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_ALL, false);
        	rs = preparedStmt.executeQuery();
        	
        	while (rs.next()) {
        		rating = map(rs, this.daoFactory);
        		ratings.add(rating);
        	}        	
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
		return ratings;
	}

    /**
     * 
     * @param rs
     * @param idUser
     * @param idLeisure
     * @return
     * @throws SQLException
     */
	private static Rating map (ResultSet rs, DAOFactory daoFactory) throws SQLException {
		Rating rating = new Rating();
		rating.setScore(rs.getInt("Note"));
		
		LeisureDAO leisureDAO = daoFactory.getLeisureDAO();
		Leisure leisure = leisureDAO.find(rs.getInt("Id_Loisir"));
		rating.setLeisure(leisure);
		
		UserDAO userDAO = daoFactory.getUserDAO();
		User user = userDAO.find(rs.getInt("Id_Utilisateur"));
		rating.setUser(user);

		return rating;
	}
}