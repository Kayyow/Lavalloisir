package com.lavalloisir.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import com.lavalloisir.beans.Category;
import com.lavalloisir.beans.Leisure;
import com.lavalloisir.beans.Rating;

public class LeisureDAOImpl implements LeisureDAO {
	
	private DAOFactory daoFactory;
	
	private static DecimalFormat df = new DecimalFormat("#.#");
	
	LeisureDAOImpl (DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	public LeisureDAOImpl() {
	}
	
	private static final String SQL_SELECT_BY_ID = "SELECT "
			+ "Id, Nom, Adresse, Description, Telephone, Email, Id_categorie "
			+ "FROM Loisir WHERE Id = ?";
	// Implémentation de la méthode trouver() définie dans l'interface LeisureDAO
    @Override
    public Leisure find (long id) throws DAOException {
        Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        Leisure leisure = null;
        
        try {
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_BY_ID, false, id);
        	rs = preparedStmt.executeQuery();
        	
        	// Parcours de la ligne de donnée de l'éventuel ResultSet retourné
        	if (rs.next()) {
        		leisure = map(rs);
        	}
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
        return leisure;
    }

	// Implémentation de la méthode trouver() définie dans l'interface LeisureDAO
    @Override
    public Leisure find (long id, List<Category> categories) throws DAOException {
        Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        Leisure leisure = null;
        
        try {
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_BY_ID, false, id);
        	rs = preparedStmt.executeQuery();
        	
        	// Parcours de la ligne de donnée de l'éventuel ResultSet retourné
        	if (rs.next()) {
        		leisure = map(rs, categories);
        	}
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
        return leisure;
    }
	
    private static final String SQL_INSERT = "INSERT INTO loisir "
    		+ "(Nom, Adresse, Description, Telephone, Email, Id_categorie) "
    		+ "VALUES (?, ?, ?, ?, ?, ?)";
	// Implémentation de la méthode creer() définie dans l'interface LeisureDao
    @Override
    public void create (Leisure leisure) throws IllegalArgumentException, DAOException {
    	Connection cnct = null;
    	PreparedStatement preparedStmt = null;
    	ResultSet autoGeneratedValues = null;
    	
    	try {
    		// Récupération d'une connexion depuis la Factory
    		cnct = daoFactory.getConnection();    		
    		
    		preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_INSERT, true,
    				leisure.getName(), leisure.getAddress(), leisure.getDescription(),
    				leisure.getPhone(), leisure.getEmail(), leisure.getCategory().getId());
    		int status = preparedStmt.executeUpdate();
    		
    		// Analyse du statut retourné par la requête d'insertion
    		if (status == 0) {
    			throw new DAOException("Echec de la création du loisir, aucune ligne ajoutée à la table.");
    		}
    		
    		autoGeneratedValues = preparedStmt.getGeneratedKeys();
    		if (autoGeneratedValues.next()) {
    			leisure.setId(autoGeneratedValues.getInt(1));
    		} else {
    			throw new DAOException("Echec de la création de loisir en base, aucun ID auto-généré retourné.");
    		}
    	} catch (SQLException e) {
    		throw new DAOException(e);
    	} finally {
    		DAOUtil.silentsClosing(autoGeneratedValues, preparedStmt, cnct);
    	}
    }
    
    private static final String SQL_SELECT_ALL = "SELECT "
			+ "Id, Nom, Adresse, Description, Telephone, Email, Id_categorie "
			+ "FROM Loisir";    
    @Override
    public List<Leisure> selectAll () throws DAOException {
    	Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        Leisure leisure = null;
        List<Leisure> leisures = new ArrayList<Leisure>();
        
        try {
        	// Récupération d'une connexion depuis la Factory
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_ALL, false);
        	
        	rs = preparedStmt.executeQuery();
        	
        	while (rs.next()) {
        		leisure = map(rs);
        		leisures.add(leisure);
        	}        	
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
		return leisures;
    }
    
    @Override
    public List<Leisure> selectAll (List<Category> categories, List<Rating> ratings) throws DAOException {
    	Connection cnct = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;
        Leisure leisure = null;
        List<Leisure> leisures = new ArrayList<Leisure>();
        
        try {
        	// Récupération d'une connexion depuis la Factory
        	cnct = daoFactory.getConnection();
        	preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_ALL, false);
        	
        	rs = preparedStmt.executeQuery();
        	
        	while (rs.next()) {
        		leisure = map(rs, categories, ratings);
        		leisures.add(leisure);
        	}        	
        } catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
		return leisures;
    }
    
    private static final String SQL_SELECT_BY_CATEGORY = "SELECT "
			+ "Id, Nom, Adresse, Description, Telephone, Email, Id_categorie "
			+ "FROM Loisir WHERE Id_categorie = ?"; 
    @Override
    public List<Leisure> selectByCategory (List<Category> categories, List<Rating> ratings, int idCategory) throws DAOException {
    	Connection cnct = null;
    	PreparedStatement preparedStmt = null;
    	ResultSet rs = null;
    	Leisure leisure = null;
    	List<Leisure> leisures = new ArrayList<Leisure>();
    	
    	try {
    		// Récupération d'un connexion depuis la Factory
    		cnct = daoFactory.getConnection();
    		preparedStmt = DAOUtil.initPreparedStatement(cnct, SQL_SELECT_BY_CATEGORY, false, idCategory);
    		
    		rs = preparedStmt.executeQuery();
    		
    		while (rs.next()) {
    			leisure = map(rs, categories, ratings);
    			leisures.add(leisure);
    		}
    	} catch (SQLException e) {
        	throw new DAOException(e);
        } finally {
        	DAOUtil.silentsClosing(rs, preparedStmt, cnct);
        }
		return leisures;
    }
    
    /**
     * Map un loisir sans sa catégorie ni sa moyenne
     * @param rs
     * @return
     * @throws SQLException
     */
    private static Leisure map (ResultSet rs) throws SQLException {
		Leisure leisure = new Leisure();
		leisure.setId(rs.getInt("Id"));
		leisure.setName(rs.getString("Nom"));
		leisure.setAddress(rs.getString("Adresse"));
		leisure.setDescription(rs.getString("Description"));
		leisure.setPhone(rs.getString("Telephone"));
		leisure.setEmail(rs.getString("Email"));
		
		return leisure;
	}
    
    /**
     * Map un loisir sans sa moyenne
     * @param rs
     * @param categories
     * @return
     * @throws SQLException
     */
	private static Leisure map (ResultSet rs, List<Category> categories) throws SQLException {
		Leisure leisure = new Leisure();
		leisure.setId(rs.getInt("Id"));
		leisure.setName(rs.getString("Nom"));
		leisure.setAddress(rs.getString("Adresse"));
		leisure.setDescription(rs.getString("Description"));
		leisure.setPhone(rs.getString("Telephone"));
		leisure.setEmail(rs.getString("Email"));
		
		for (Category category : categories) {
			if (category.getId() == rs.getInt("Id_categorie")) {
				leisure.setCategory(category);
			}
		}
		
		return leisure;
	}
    
    /**
     * Map un loisir
     * @param rs
     * @param categories
     * @param ratings
     * @return
     * @throws SQLException
     */
	private static Leisure map (ResultSet rs, List<Category> categories, List<Rating> ratings) throws SQLException {
		Leisure leisure = new Leisure();
		leisure.setId(rs.getInt("Id"));
		leisure.setName(rs.getString("Nom"));
		leisure.setAddress(rs.getString("Adresse"));
		leisure.setDescription(rs.getString("Description"));
		leisure.setPhone(rs.getString("Telephone"));
		leisure.setEmail(rs.getString("Email"));
		
		for (Category category : categories) {
			if (category.getId() == rs.getInt("Id_categorie")) {
				leisure.setCategory(category);
			}
		}
		
		double nbScore = 0.0;
		double scoreTotal = 0.0;
		for (Rating rating : ratings) {
			if (rating.getLeisure().getId() == leisure.getId()) {
				scoreTotal += rating.getScore();
				nbScore++;
			}
		}
		
		if (nbScore != 0) {
			leisure.setAverage(df.format(scoreTotal/nbScore));
		}
		
		return leisure;
	}
}